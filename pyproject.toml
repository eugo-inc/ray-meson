[build-system]
build-backend = 'mesonpy'

# Potentially, lower versions may work, yet they haven't been tested nor guaranteed to work.
# The only 2 hard requirements are: `meson>=1.3.0` and `cython>=3.0.0`.
requires = [
    'meson_python>=0.16.0',
    'meson>=1.5.2',
    'cython>=3.0.11'
]


[project]
name = 'ray'
version = '3.0.0.dev0'
readme = 'README.rst'
requires-python = '>=3.12'
license = {file = 'LICENSE'}

# @TODO+:Eugo
# These and `[project.optional-dependencies]` should be synced against `setup.py`, `requirements.txt`. and PyPi API:
#
dependencies = [
    'click>=7.0',
    'filelock',
    'jsonschema',
    'msgpack<2.0.0,>=1.0.0',
    'packaging',
    'protobuf!=3.19.5,>=3.15.3',
    'pyyaml',
    'aiosignal',
    'frozenlist',
    'requests',
]


[project.optional-dependencies]
all_cpp = [
    'ray[all]',
    'ray[cpp]'
]

all = [
    'ray[air]',
    'ray[adag]',
    'ray[client]',
    'ray[default]',
    'ray[data]',
    'ray[observability]',
    'ray[serve]',
    'ray[serve_grpc]',
    'ray[tune]',
    'ray[train]',
    'ray[cgraph]',
    'ray[adag]',
]

air = [
    'ray[data]',
    'ray[serve]',
    'ray[tune]',
    'ray[train]',
]

cgraph = [
    'cupy-cuda12x; sys_platform != "darwin"',
]

adag = [
'ray[cgraph]',
]

client = [
    'grpcio!=1.56.0',
]

cpp = [
    "ray_cpp==3.0.0.dev0",
]

default = [
    "aiohttp >= 3.7",
    "aiohttp_cors",
    "colorful",
    "py-spy >= 0.2.0; python_version < '3.12'",  # noqa:E501
    "py-spy >= 0.4.0; python_version >= '3.12'",  # noqa:E501
    "requests",
    "grpcio >= 1.32.0; python_version < '3.10'",  # noqa:E501
    "grpcio >= 1.42.0; python_version >= '3.10'",  # noqa:E501
    "opencensus",
    "pydantic!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,<3",
    "prometheus_client >= 0.7.1",
    "smart_open",
    "virtualenv >=20.0.24, !=20.21.1",  # For pip runtime env.

    # These packages are vendored in the standard, Bazel-built Ray, but we want to decouple them:
    # `@/python/ray/_private/runtime_env/agent/thirdparty_files/`
    'aiohappyeyeballs',
    'aiohttp',
    'aiosignal',
    'attrs',
    'frozenlist',
    'idna',
    'multidict',
    'propcache',
    'yarl',

    # `@/python/ray/thirdparty_files/`
    'colorama',
    'psutil',
    'setproctitle'
]

data = [
    'fsspec',
    'pandas>=1.3',
    'numpy>=1.20',
    'pyarrow>=9.0.0',
]

observability = [
    'opentelemetry-api',
    'opentelemetry-sdk',
    'opentelemetry-exporter-otlp',
    #'memray',
]

rllib = [
    'ray[tune]',

    'dm_tree',
    'gymnasium==1.0.0',
    'lz4',
    'ormsgpack==1.7.0',
    'pyyaml',
    'scipy',
]

serve = [
    'uvicorn[standard]',
    'requests',
    'starlette',
    'fastapi',
    'watchfiles',
    'ray[default]',
]

serve_grpc = [
    'ray[serve]',
    'grpcio>=1.42.0',
    'pyOpenSSL',
]

tune = [
    'pandas',
    'tensorboardx>=1.9',
    'requests',
    'pyarrow>=9.0.0',
    'fsspec',
]

train = [
    'ray[tune]'
]


[project.scripts]
ray = 'ray.scripts.scripts:main'
rllib = 'ray.rllib.scripts:cli' # In original version, it was only provided with `[rllib]` extra. One day, we'll find how to achieve that in meson-python.
serve = 'ray.serve.scripts:cli'
tune = 'ray.tune.cli.scripts:cli'
